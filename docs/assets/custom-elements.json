{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/expansion-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element similar to the HTML5 `<details>` element.",
          "name": "ExpansionPanel",
          "cssProperties": [
            {
              "type": {
                "text": "Background"
              },
              "description": "Default panel header background color.",
              "name": "--panel-header-background",
              "default": "#fff"
            },
            {
              "description": "Panel header minimum height.",
              "name": "--panel-header-min-height",
              "default": "48px"
            },
            {
              "type": {
                "text": "Background"
              },
              "description": "Active toggle button ripple background.",
              "name": "--panel-ripple-background",
              "default": "rgba(0, 0, 0, 0.38)"
            }
          ],
          "cssParts": [
            {
              "description": "An element wrapping the `header` slot.",
              "name": "header"
            },
            {
              "description": "A toggle button, child of the header part.",
              "name": "toggle"
            },
            {
              "description": "An element wrapping the `content` slot.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "Slot fot panel content",
              "name": ""
            },
            {
              "description": "Slot for panel header",
              "name": "header"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disabled panel can not be expanded or collapsed",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "HTMLDivElement | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_isShiftTabbing",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_tabPressed",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_boundBodyKeydown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_boundBodyKeyup",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_setFocused",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "focused",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onToggleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onToggleKeyDown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onBodyKeydown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onBodyKeyup",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean | null | undefined"
              },
              "default": "false",
              "description": "When true, the content is visible.",
              "attribute": "opened",
              "reflects": true,
              "inheritedFrom": {
                "name": "OpenedMixin",
                "module": "src/opened-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "description": "Toggle the opened property value.",
              "inheritedFrom": {
                "name": "OpenedMixin",
                "module": "src/opened-mixin.ts"
              }
            }
          ],
          "events": [
            {
              "name": "opened-changed",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Event fired when expanding / collapsing"
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "State attribute set when element has focus.",
              "name": "focused"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "State attribute set when focused from keyboard.",
              "name": "focus-ring"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disabled panel can not be expanded or collapsed",
              "fieldName": "disabled"
            },
            {
              "name": "opened",
              "type": {
                "text": "boolean | null | undefined"
              },
              "default": "false",
              "description": "When true, the content is visible.",
              "fieldName": "opened",
              "inheritedFrom": {
                "name": "OpenedMixin",
                "module": "src/opened-mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "OpenedMixin",
              "module": "/src/opened-mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "expansion-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ExpansionPanel",
          "declaration": {
            "name": "ExpansionPanel",
            "module": "src/expansion-panel.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "expansion-panel",
          "declaration": {
            "name": "ExpansionPanel",
            "module": "src/expansion-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/fancy-accordion.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element implementing the accordion widget: a vertically stacked set of expandable panels\nthat wraps several instances of the `<expansion-panel>` element. Only one panel can be opened\n(expanded) at a time.\n\nPanel headings function as controls that enable users to open (expand) or hide (collapse) their\nassociated sections of content. The user can toggle panels by mouse click, Enter and Space keys.\n\nThe component supports keyboard navigation and is aligned with the\n[WAI-ARIA Authoring Practices](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion).",
          "name": "FancyAccordion",
          "slots": [
            {
              "description": "Slot fot panel elements.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "openedIndex",
              "type": {
                "text": "number | null | undefined"
              },
              "default": "null",
              "description": "Index of the currently opened panel. By default all the panels are closed.\nOnly one panel can be opened at the same time. Setting `null` or `undefined`\ncloses all the accordion panels.",
              "attribute": "opened-index"
            },
            {
              "kind": "field",
              "name": "_items",
              "type": {
                "text": "ExpansionPanel[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_boundOnOpened",
              "privacy": "private",
              "default": "this._onOpened.bind(this)"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "Element | null"
              }
            },
            {
              "kind": "method",
              "name": "_onKeydown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getAvailableIndex",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "increment",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onOpened",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_notifyOpen",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "name": "opened-index-changed",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Event fired when changing currently opened panel."
            }
          ],
          "attributes": [
            {
              "name": "opened-index",
              "type": {
                "text": "number | null | undefined"
              },
              "default": "null",
              "description": "Index of the currently opened panel. By default all the panels are closed.\nOnly one panel can be opened at the same time. Setting `null` or `undefined`\ncloses all the accordion panels.",
              "fieldName": "openedIndex"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "fancy-accordion",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FancyAccordion",
          "declaration": {
            "name": "FancyAccordion",
            "module": "src/fancy-accordion.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "fancy-accordion",
          "declaration": {
            "name": "FancyAccordion",
            "module": "src/fancy-accordion.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/intl-currency.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element that formats currency using Intl.",
          "name": "IntlCurrency",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Amount to be formatted.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "currency",
              "type": {
                "text": "string | null | undefined"
              },
              "default": "'EUR'",
              "description": "Currency code used for formatting.",
              "attribute": "currency"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string | null | undefined"
              },
              "default": "'en-GB'",
              "description": "Locale code used for formatting.",
              "attribute": "locale"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Amount to be formatted.",
              "fieldName": "value"
            },
            {
              "name": "currency",
              "type": {
                "text": "string | null | undefined"
              },
              "default": "'EUR'",
              "description": "Currency code used for formatting.",
              "fieldName": "currency"
            },
            {
              "name": "locale",
              "type": {
                "text": "string | null | undefined"
              },
              "default": "'en-GB'",
              "description": "Locale code used for formatting.",
              "fieldName": "locale"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "intl-currency",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IntlCurrency",
          "declaration": {
            "name": "IntlCurrency",
            "module": "src/intl-currency.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "intl-currency",
          "declaration": {
            "name": "IntlCurrency",
            "module": "src/intl-currency.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/opened-mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "OpenedMixin",
          "members": [
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean | null | undefined"
              },
              "default": "false",
              "description": "When true, the content is visible.",
              "attribute": "opened",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "toggle",
              "description": "Toggle the opened property value."
            }
          ],
          "attributes": [
            {
              "name": "opened",
              "type": {
                "text": "boolean | null | undefined"
              },
              "default": "false",
              "description": "When true, the content is visible.",
              "fieldName": "opened"
            }
          ],
          "parameters": [
            {
              "name": "base",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OpenedMixin",
          "declaration": {
            "name": "OpenedMixin",
            "module": "src/opened-mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/progress-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element similar to the HTML5 `<progress>` element.",
          "name": "ProgressBar",
          "cssProperties": [
            {
              "type": {
                "text": "Color"
              },
              "description": "Color of the filled progress bar part.",
              "name": "--progress-bar-fill-color",
              "default": "#6200ee"
            },
            {
              "description": "Opacity set on the underlying track.",
              "name": "--progress-bar-opacity",
              "default": "0.16"
            }
          ],
          "cssParts": [
            {
              "description": "A progress bar background.",
              "name": "bar"
            },
            {
              "description": "A progress bar foreground.",
              "name": "value"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "description": "Current progress value.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Minimum bound of the progress bar.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Maximum bound of the progress bar.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indeterminate state of the progress bar.\nThis property takes precedence over other state properties (min, max, value).",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_normalizedValueChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "min",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "max",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_valueChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_minChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "min",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_maxChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "max",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0.5",
              "description": "Current progress value.",
              "fieldName": "value"
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Minimum bound of the progress bar.",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Maximum bound of the progress bar.",
              "fieldName": "max"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indeterminate state of the progress bar.\nThis property takes precedence over other state properties (min, max, value).",
              "fieldName": "indeterminate"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "progress-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ProgressBar",
          "declaration": {
            "name": "ProgressBar",
            "module": "src/progress-bar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "progress-bar",
          "declaration": {
            "name": "ProgressBar",
            "module": "src/progress-bar.ts"
          }
        }
      ]
    }
  ]
}
